<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[搭建docker仓库]]></title>
    <url>%2F2018%2F10%2F31%2Fdocker%2F</url>
    <content type="text"><![CDATA[在使用kolla部署openstack时要下载很多镜像，部署时间长短容易受网速影响。提前下载所有镜像或在第一次部署完成下载所有镜像后把镜像上传到本地私有docker仓库，可以加快后面再次部署需要的时间。 CentOS7安装docker要求：系统为64位、内核版本为 3.10 以上。 查看你当前的内核版本uname -r 安装 Dockeryum -y install docker 启动 Docker 后台服务service docker start 测试运行 hello-world由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。docker run hello-world 搭建本地仓库 获取官方registry镜像docker pull registry 启动容器默认情况下，仓库会被创建在容器的 /var/lib/registry 目录下。你可以通过 -v 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 /opt/data/registry 目录。 1docker run -d -p 5000:5000 --privileged=true --restart=always --name registry -v /opt/data/registry:/var/lib/registry registry 在本机查看已有的镜像 1234[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/registry latest 2e2f252f3c88 6 weeks ago 33.3 MBdocker.io/hello-world latest 4ab4c602aa5e 6 weeks ago 1.84 kB 标记本地镜像 123456[root@localhost ~]# docker tag docker.io/hello-world 192.168.89.149:5000/docker.io/hello-world[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/registry latest 2e2f252f3c88 6 weeks ago 33.3 MB192.168.89.149:5000/docker.io/hello-world latest 4ab4c602aa5e 6 weeks ago 1.84 kBdocker.io/hello-world latest 4ab4c602aa5e 6 weeks ago 1.84 kB 修改/etc/docker/daemon.json，并重启docker（如果重启失败，将daemon.json重命名为daemon.conf） 1234567&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;192.168.89.149:5000&quot;]&#125;[root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker 上传标记镜像 1234[root@localhost ~]# docker push 192.168.89.149:5000/docker.io/hello-worldThe push refers to a repository [192.168.89.149:5000/docker.io/hello-world]428c97da766c: Pushed latest: digest: sha256:1a6fd470b9ce10849be79e99529a88371dff60c60aab424c077007f6979b4812 size: 524 用 curl 查看仓库中的镜像。 12345[root@localhost ~]# curl 127.0.0.1:5000/v2/_catalog&#123;&quot;repositories&quot;:[&quot;docker.io/hello-world&quot;]&#125;[root@localhost ~]# curl 127.0.0.1:5000/v2/kolla/centos-source-haproxy/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-haproxy&quot;,&quot;tags&quot;:[&quot;rocky&quot;,&quot;ocata&quot;]&#125; 先删除已有镜像，再尝试从私有仓库中下载这个镜像。 123[root@localhost ~]# docker rmi 192.168.89.149:5000/docker.io/hello-world[root@localhost ~]# docker pull 192.168.89.149:5000/docker.io/hello-world 将下载好的openstack镜像存储到仓库中1234# 标记镜像docker images | grep -v TAG | awk &apos;&#123;print $1,$2&#125;&apos; OFS=&apos;:&apos; | xargs -I &#123;&#125; docker tag &#123;&#125; &apos;192.168.89.149:5000/&apos;&#123;&#125;# 上传镜像docker images | grep -v TAG | grep 192 | awk &apos;&#123;print $1,$2&#125;&apos; OFS=&apos;:&apos; | xargs -I &#123;&#125; docker push &#123;&#125;]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用kolla部署openstack（一）]]></title>
    <url>%2F2018%2F10%2F29%2Fopenstack%2F</url>
    <content type="text"><![CDATA[实验环境最近在折腾kolla部署容器化的openstack，遇到的坑实在是太多了，在虚拟机中把可能遇到的问题都查了一遍才敢部署到物理机上。但还是没搞明白为什么虚拟机中virt_type只能为qemu才可以创建instance。有兴趣的建议先在VMware Workstation中尝试，处理器开启虚拟化Intel VT-x/EPT或AMD-V/RVI(V)，所有操作在root下进行。虚拟机配置如下：123456系统：CentOS 7内存：16GB处理器：4 硬盘：100GB网卡1：桥接模式网卡2：桥接模式 修改CentOS默认yum源 备份默认yum源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载阿里云的yum源配置文件到/etc/yum.repos.d/wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 本地缓存服务器上的软件包信息yum makecache 更新yum -y update 修改 ~/.pip/pip.conf（没有就创建一个）12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 准备工作基本是按照OpenStack Docs的Quick Start进行的（For development）。首先修改/etc/hostname和/etc/hosts（部署用到的每台主机都要改）。 在deploy主机上执行以下命令：12345678910111213141516171819202122232425262728293031323334# 安装pip并更新到最新yum install -y epel-releaseyum install -y python-pippip install -U pip# 安装依赖yum install -y python-devel libffi-devel gcc openssl-devel libselinux-python# 安装ansibleyum install -y ansible# 更新ansible到最新pip install -U ansible# 在ansible配置文件/etc/ansible/ansible.cfg中增加信息（可选）[defaults]host_key_checking=Falsepipelining=Trueforks=100# 安装Kolla-ansiblegit clone https://github.com/openstack/kolla -b stable/rockygit clone https://github.com/openstack/kolla-ansible -b stable/rocky# 安装kolla和kolla-ansible的requirementspip install -r kolla/requirements.txtpip install -r kolla-ansible/requirements.txt# 把kolla-ansible的配置文件（globals.yml、passwords.yml）复制到/etc/kolla中mkdir -p /etc/kollacp -r kolla-ansible/etc/kolla/* /etc/kolla# 复制（all-in-one、multinode）到当前目录下cp kolla-ansible/ansible/inventory/* . 修改配置信息修改all-in-one如下：1234567891011121314151617[control]localhost ansible_connection=local[network]localhost ansible_connection=local[external-compute]localhost ansible_connection=local[storage]localhost ansible_connection=local[monitoring]localhost ansible_connection=local[deployment]localhost ansible_connection=local 如果是多台机器，例如一台虚拟机上写配置文件（deploy），给另一台虚拟机部署openstack环境。修改mutinode文件：123456789101112131415161718[control]# These hostname must be resolvable from your deployment hostcontrol2 ansible_user=root ansible_password=123 ansible_become=true[network]control2 ansible_user=root ansible_password=123 ansible_become=true[external-compute]control2 ansible_user=root ansible_password=123 ansible_become=true[monitoring]control2 ansible_user=root ansible_password=123 ansible_become=true[storage]control2 ansible_user=root ansible_password=123 ansible_become=true[deployment]localhost ansible_connection=local ansible_become=true 如果有私有docker仓库，部署过程会更快，需要修改/etc/kolla/global.yml1docker_registry: &quot;ip:port&quot; 检查配置文件信息是否正确1ansible -i multinode all -m ping 生成随机密码，密码存放于/etc/kolla/passwords.yml中。修改此文件中keystone_admin_password字段密码为admin。1./kolla-ansible/tools/generate_passwords.py 修改/etc/kolla/globals.yml1234567891011121314kolla_base_distro: &quot;centos&quot;kolla_install_type: &quot;source&quot;openstack_release: &quot;rocky&quot;openstack_release: &quot;master&quot;# 内网network_interface: &quot;eth0&quot;# 外网neutron_external_interface: &quot;eth1&quot;# 与内网网卡在同一子网中，且ip未被占用kolla_internal_vip_address: &quot;10.1.0.250&quot;nova_console: &quot;spice&quot;enable_horizon: &quot;yes&quot;# 如果是虚拟机，只能用qemu代替kvm，否则实例启动会卡在：Booting from Hard Disk...nova_compute_virt_type: &quot;kvm&quot; 修改部署openstack机器上/etc/docker/daemon.json，并重启docker123&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]&#125; 部署1234567891011# Bootstrap servers with kolla deploy dependencies./kolla-ansible/tools/kolla-ansible -i multinode bootstrap-servers# 对主机进行部署前检查（kolla_internal_vip_address如果被占用会失败）./kolla-ansible/tools/kolla-ansible -i multinode prechecks# 进行openstack部署./kolla-ansible/tools/kolla-ansible -i multinode deploy# 如果部署失败，销毁失败的部署./kolla-ansible/tools/kolla-ansible -i &lt;&lt;inventory-file&gt;&gt; destroy 部署成功后输入虚拟ip地址即可进入dashboard。如果需要访问外部网络，123供应商类型：Flat物理网络：physnet1 （/etc/kolla/neutron-server/ml2_conf.ini中flat_networks字段值）添加内部接口（子网网关） 开启多域支持，修改/etc/kolla/horizon/local_settings，重启horizon容器。1OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True 注意：kolla-ansible方式安装的openstack（P版本及以后）访问API（endpoint）与之前版本不一样，在用openstack4j(V3.1.0)认证时获取不到信息，需要自己修改endpoint。下面操作在deploy上面进行：1234567891011121314151617181920212223# Install basic OpenStack CLI clients:pip install python-openstackclient python-glanceclient python-neutronclient# generate an openrc filecd kolla-ansible/tools./kolla-ansible post-deploy. /etc/kolla/admin-openrc.sh# 查看及修改端点信息[root@deploy tools]# openstack endpoint list[root@deploy tools]# openstack endpoint --help[root@deploy tools]# openstack endpoint set --help# 查看实例[root@deploy ~]# nova list# 查看hypervisor类型[root@deploy ~]# openstack hypervisor list# 查看服务列表[root@deploy ~]# openstack service list[root@deploy ~]# nova service-list[root@deploy ~]# openstack compute service list 报错信息整理部署过程报错： cannot uninstall xxx 查看安装什么东西导致出错，然后pip install XXXX –ignore-installed xxx TASK [haproxy : Waiting for virtual IP to appear] 编辑/etc/kolla/globals.yml，重新设置keepalived_virtual_router_id的值. waiting for nova-compute service up… kolla-ansible版本要与openstack_release版本（docker hub中查看tag）一致。pip安装的kolla-ansible（pip show kolla-ansible）对应最新的openstack稳定版（现在是rocky） neutron容器启动报错：超时 kolla部署过程会断开外网网卡导致下载不到docker镜像。提前下载镜像自建docker仓库或者network_interface对应的网卡能上网就行 创建实例报错： no valid hosts… 123456789101112131415161. 可能是virt_type=kvm导致的，配置文件/etc/kolla/nova-compute/nova.conf中virt_type改为qemu，重启nova_compute容器[libvirt]connection_uri = qemu+tcp://192.168.89.149/systemvirt_type = qemu2. 也可能是其他原因- nova-compute日志提示ERROR nova.compute.manager [instance: 3af11e19-b4f8-452a-8f3d-3d659be050bd] libvirtError: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken.- libvirtd日志提示2018-11-02 01:14:26.017+0000: 43848: error : virDBusCall:1570 : error from service: CanSuspend: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken.### 解决办法检查节点状态，发现selinux开启了，关闭selinux即可查看selinux状态：sestatus临时关闭：setenforce 0永久关闭：改配置文件/etc/selinux/config,将其中SELINUX设置为disabled。 MessagingTimeout: Timed out waiting for a reply to message ID… 查看nova_compute的日志，如果需要重启容器：docker restart $(docker ps -aq) kolla部署OpenStack Ocata版本注意事项 确保selinux关闭，否则部署完成实例创建失败 修改kolla-ansible/ansible/roles/haproxy/tasks/precheck.yml中的always_run: True为run_once: true，否则报错： 12TASK [haproxy : include] *************************************************************************************fatal: [vmc]: FAILED! =&gt; &#123;&quot;reason&quot;: &quot;&apos;always_run&apos; is not a valid attribute for a Task\n\nThe error appears to have been in &apos;/root/kolla-ansible/ansible/roles/haproxy/tasks/precheck.yml&apos;: line 9, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Clearing temp kolla_keepalived_running file\n ^ here\n\nThis error can be suppressed as a warning using the \&quot;invalid_task_attribute_failed\&quot; configuration&quot;&#125; 确保部署openstack的机器上libvirtd停止运行service libvirtd status，service libvirtd stop，否则报错： 123TASK [nova : Checking that libvirt is not running] ***********************************************************fatal: [vmc]: FAILED! =&gt; &#123;&quot;changed&quot;: false, &quot;failed_when_result&quot;: true, &quot;stat&quot;: &#123;&quot;atime&quot;: 1541046790.1479998, &quot;attr_flags&quot;: &quot;&quot;, &quot;attributes&quot;: [], &quot;block_size&quot;: 4096, &quot;blocks&quot;: 0, &quot;charset&quot;: &quot;binary&quot;, &quot;ctime&quot;: 1541046790.1479998, &quot;dev&quot;: 19, &quot;device_type&quot;: 0, &quot;executable&quot;: true, &quot;exists&quot;: true, &quot;gid&quot;: 0, &quot;gr_name&quot;: &quot;root&quot;, &quot;inode&quot;: 37921, &quot;isblk&quot;: false, &quot;ischr&quot;: false, &quot;isdir&quot;: false, &quot;isfifo&quot;: false, &quot;isgid&quot;: false, &quot;islnk&quot;: false, &quot;isreg&quot;: false, &quot;issock&quot;: true, &quot;isuid&quot;: false, &quot;mimetype&quot;: &quot;inode/socket&quot;, &quot;mode&quot;: &quot;0777&quot;, &quot;mtime&quot;: 1541046790.1479998, &quot;nlink&quot;: 1, &quot;path&quot;: &quot;/var/run/libvirt/libvirt-sock&quot;, &quot;pw_name&quot;: &quot;root&quot;, &quot;readable&quot;: true, &quot;rgrp&quot;: true, &quot;roth&quot;: true, &quot;rusr&quot;: true, &quot;size&quot;: 0, &quot;uid&quot;: 0, &quot;version&quot;: null, &quot;wgrp&quot;: true, &quot;woth&quot;: true, &quot;writeable&quot;: true, &quot;wusr&quot;: true, &quot;xgrp&quot;: true, &quot;xoth&quot;: true, &quot;xusr&quot;: true&#125;&#125; to retry, use: --limit @/root/kolla-ansible/ansible/site.retry 修改kolla-ansible/ansible/roles/mariadb/tasks/lookup_cluster.yml文件，删除所有的always_run: True，否则报错： 123TASK [mariadb : include] *************************************************************************************fatal: [vmc]: FAILED! =&gt; &#123;&quot;reason&quot;: &quot;&apos;always_run&apos; is not a valid attribute for a Task\n\nThe error appears to have been in &apos;/root/kolla-ansible/ansible/roles/mariadb/tasks/lookup_cluster.yml&apos;: line 2, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n---\n- name: Cleaning up temp file on localhost\n ^ here\n\nThis error can be suppressed as a warning using the \&quot;invalid_task_attribute_failed\&quot; configuration&quot;&#125; to retry, use: --limit @/root/kolla-ansible/ansible/site.retry 在虚拟机上部署过程中会可能网卡出现问题（ping不通）导致部署失败，重启网卡即可 12345678910# networkservice network restart# ifdown/ifupifdown eth0ifup eth0# ifconfigifconfig eth0 downifconfig eth0 up 参考资料 OpenStack Docs: Quick Start Docker容器化部署运维OpenStack和Ceph CentOS7单节点部署OpenStack-Pike(使用kolla-ansible) Openstack之ubuntu16使用kolla部署实验 kolla-ansible安装openstack(Ocata)]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>openstack</tag>
        <tag>kolla</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础]]></title>
    <url>%2F2018%2F10%2F25%2Fhtml%2F</url>
    <content type="text"><![CDATA[HTML文件基本结构html中的标签一般都是成对出现的，分开始标签和结束标签，标签由英文尖括号&lt;和&gt;括起来。123456789&lt;html&gt; &lt;!-- &lt;html&gt;&lt;/html&gt;称为根标签，所有的网页标签都在&lt;html&gt;&lt;/html&gt;中 --&gt; &lt;head&gt; &lt;!-- 定义文档的头部，头部元素有&lt;title&gt;、&lt;script&gt;、&lt;style&gt;、&lt;link&gt;、&lt;meta&gt; --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 网页的主要内容，如&lt;h1&gt;、&lt;p&gt;、&lt;a&gt;、&lt;img&gt;等 --&gt; &lt;/body&gt;&lt;/html&gt; 常用标签HTML语义化：根据内容的结构化（内容语义化），选择合适的标签（代码语义化），便于开发者阅读和写出更优雅的代码的同时，让浏览器的爬虫和机器很好的解析。 &lt;hx&gt;：标题标签一共有6个，并且依据重要性递减。&lt;h1&gt;为一级标题，是最高的等级。&lt;h6&gt;为六级标题。&lt;h1&gt;标题文本&lt;/h1&gt;&lt;em&gt;：表示强调，默认用斜体表示。&lt;strong&gt;：表示更强烈的强调，用粗体表示。&lt;span&gt;：没有语义，作用是为了设置单独的样式。&lt;q&gt;：短文本引用，浏览器会对q标签自动添加双引号。&lt;blockquote&gt;：长文本引用。&lt;br /&gt;：回车换行。&amp;nbsp;：空格。&lt;hr&gt;：添加水平横线。&lt;address&gt;：地址信息。&lt;code&gt;：单行代码。如果是多行代码，可以使用&lt;pre&gt;标签。&lt;pre&gt;：被包围在pre元素中的文本通常会保留空格和换行符。 无序列表1234&lt;ul&gt; &lt;li&gt;信息&lt;/li&gt; ...&lt;/ul&gt; 有序列表1234&lt;ol&gt; &lt;li&gt;零基础学习html&lt;/li&gt; ...&lt;/ol&gt; &lt;div&gt;：相当于一个容器，存放独立的逻辑部分。用id属性为&lt;div&gt;提供唯一的名称。 &lt;a&gt;标签作用： 实现超链接 链接email地址，使用mailto能让访问者便捷向网站管理者发送电子邮件。如果mailto后面同时有多个参数的话，第一个参数必须以“?”开头，后面的参数每一个都以“&amp;”分隔。1234567&lt;a href="目标网址" title="鼠标滑过显示的文本"&gt;链接显示的文本&lt;/a&gt;&lt;!-- 在新的浏览器窗口中打开网页 --&gt;&lt;a href="目标网址" target="_blank"&gt;click here!&lt;/a&gt;&lt;!-- 链接email地址 --&gt;&lt;a href="mailto:yy@xxx.com?subject=主题&amp;body=内容。"&gt;发送邮件给我&lt;/a&gt; &lt;img&gt;标签：插入图片（可以是GIF，PNG，JPEG格式）。 src标识图像的位置； alt指定图像的描述性文本，当图像不可见时（下载不成功时），可看到该属性指定的文本； title提供在图像可见时对图像的描述(鼠标滑过图片时显示的文本)；1&lt;img src = &quot;myimage.gif&quot; alt = &quot;My Image&quot; title = &quot;My Image&quot; /&gt; 创建表格: table表格在没有添加css样式之前，在浏览器中显示是没有表格线的 &lt;tbody&gt;…&lt;/tbody&gt;：如果不加&lt;thead&gt;&lt;tbody&gt;&lt;tfooter&gt;,table表格加载完后才显示。加上这些表格结构，tbody包含行的内容下载完优先显示，不必等待表格结束后再显示。 &lt;tr&gt;…&lt;/tr&gt;：表格的一行，所以有几对tr，表格就有几行。 &lt;td&gt;…&lt;/td&gt;：表格的一个单元格，一行中包含几对…，说明一行中就有几列。 &lt;th&gt;…&lt;/th&gt;：表格表头，th标签中的文本默认为粗体居中显示。 表格中列的个数，取决于一行中数据单元格的个数。123456789101112131415161718&lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;班级&lt;/th&gt; &lt;th&gt;学生数&lt;/th&gt; &lt;th&gt;平均成绩&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;一班&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;td&gt;89&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;二班&lt;/td&gt; &lt;td&gt;35&lt;/td&gt; &lt;td&gt;85&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; 为表格加入边框123&lt;style type=&quot;text/css&quot;&gt;table tr td,th&#123;border:1px solid #000;&#125;&lt;/style&gt; 为表格添加标题和摘要 摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性(语义化)，使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。 标题用以描述表格内容，标题的显示位置：表格上方。123456789101112131415161718192021&lt;table summary=&quot;本表格记录2012年到2013年库存记录，记录包括U盘和耳机库存量&quot;&gt; &lt;caption&gt;2012年到2013年库存记录&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;产品名称 &lt;/th&gt; &lt;th&gt;品牌 &lt;/th&gt; &lt;th&gt;库存量（个） &lt;/th&gt; &lt;th&gt;入库时间 &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;耳机 &lt;/td&gt; &lt;td&gt;联想 &lt;/td&gt; &lt;td&gt;500&lt;/td&gt; &lt;td&gt;2013-1-2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;U盘 &lt;/td&gt; &lt;td&gt;金士顿 &lt;/td&gt; &lt;td&gt;120&lt;/td&gt; &lt;td&gt;2013-8-10&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 使用表单标签与用户交互 所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在 标签之间，否则用户输入的信息提交不到服务器上。 method ： 数据传送的方式（get/post）。 action ：浏览者输入的数据被传送到的地方,比如一个PHP页面(save.php)。123456&lt;form method=&quot;post&quot; action=&quot;save.php&quot;&gt; &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt; &lt;label for=&quot;pass&quot;&gt;密码:&lt;/label&gt; &lt;input type=&quot;password&quot; name=&quot;pass&quot; /&gt;&lt;/form&gt; 文本输入框 当type=”text”时，输入框为文本输入框；当type=”password”时, 输入框为密码输入框。 name：为文本框命名 value：为文本输入框设置默认值。(一般起到提示作用)1&lt;input type=&quot;text/password&quot; name=&quot;名称&quot; value=&quot;文本&quot; /&gt; 文本域：支持多行文本输入。在css中col可用width、row用height来代替。1&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt; 单选/复选框 当type=”radio”时，控件为单选框；当type=”checkbox”时，控件为复选框。 value：提交数据到服务器的值。 name：为控件命名 当设置 checked=”checked” 时，该选项被默认选中 同一组的单选按钮，name 取值一定要一致，这样同一组的单选按钮才可以起到单选的作用。1&lt;input type=&quot;radio/checkbox&quot; value=&quot;值&quot; name=&quot;名称&quot; checked=&quot;checked&quot;/&gt; 下拉列表框 设置selected=”selected”属性，则该选项被默认选中。 在&lt;select&gt;标签中设置multiple=”multiple”属性可以实现多选功能。 在windows下进行多选时按下Ctrl键同时进行单击（在Mac下使用Command+单击）可以选择多个选项。123456789&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt; &lt;label&gt;爱好:&lt;/label&gt; &lt;select&gt; &lt;option value=&quot;向服务器提交的值&quot;&gt;显示的值&lt;/option&gt; &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt; &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt; &lt;option value=&quot;购物&quot; selected=&quot;selected&quot;&gt;购物&lt;/option&gt; &lt;/select&gt;&lt;/form&gt; 提交按钮：提交表单信息到服务器。&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; 重置按钮：重置表单信息。&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; form表单中的label标签 不会向用户呈现任何特殊效果 作用是为鼠标用户改进可用性。当用户单击选中该label标签时，自动选中和该label标签相关连的表单控件。&lt;label for=&quot;控件id名称&quot;&gt;12345678910&lt;form&gt; &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot; /&gt; &lt;br /&gt; &lt;label for=&quot;female&quot;&gt;女&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;female&quot; /&gt; &lt;br /&gt; &lt;label for=&quot;email&quot;&gt;输入你的邮箱地址&lt;/label&gt; &lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter email&quot;&gt;&lt;/form&gt;]]></content>
      <categories>
        <category>网页相关</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2018%2F10%2F15%2Fblog%2F</url>
    <content type="text"><![CDATA[准备工作Github创建个人仓库首先要有一个github账号，点击GitHub中的New repository创建新仓库，仓库名为：username.github.io。 安装git在电脑上安装Git客户端，并将Git与Github账号绑定。在命令行中设置user.name和user.email配置信息：12git config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你的Github注册邮箱&quot; 生成ssh密钥文件：1ssh-keygen -t rsa -C &quot;你的Github注册邮箱&quot; 默认不需要设置密码，直接回车即可。然后找到生成的.ssh文件夹中的id_rsa.pub密钥，将内容复制到Github的SSH Key中。在git Bash中检测Github公钥是否设置成功：1ssh git@github.com 如出现以下信息则说明设置成功：1234PS D:\Work\MyBlog&gt; ssh git@github.comPTY allocation request failed on channel 0Hi crystalww! You&apos;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 安装Node.js安装Node.js会默认安装npm。检测是否安装成功可分别输入：node -v 和 npm -v。 使用国内的源（比如淘宝NPM镜像）去替换官方的源以加快下载包的速度。npm config set registry http://registry.npm.taobao.org/ 安装Hexo1npm install -g hexo-cli 创建MyBlog文件夹123hexo inithexo generate 或 hexo ghexo server 或 hexo s 在本地浏览器打开：http://localhost:4000 主题修改下载主题以hexo-next为例，在站点的根目录下（MyBlog文件夹）执行以下命令：1git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题打开站点配置文件(_config.yml)，将themes字段的值修改为next 验证主题12hexo clean # 清除 Hexo 的缓存hexo s --debug # 启动 Hexo 本地站点，并开启调试模式 使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。 个性化配置（参考Next主题配置）选择Scheme更改主题配置文件(themes/next/_config.yml)，搜索scheme字段，去掉需要启动的scheme前的注释即可。12345# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 修改站点配置文件12345678# Sitetitle: 标题subtitle:description:keywords:author: 作者language: zh-Hanstimezone: Asia/Shanghai 添加标签和分类修改主题配置文件中的menu123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 生成“分类”页并添加type属性1hexo new page categories 成功后会提示1INFO Created: ~/MyBlog/source/categories/index.md 根据上面的路径，找到index.md这个文件，修改为：12345---title: categoriesdate: 2018-10-15 11:17:11type: &quot;categories&quot;--- 保存并关闭文件。 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。hexo一篇文章只能属于一个分类，如果在“- 测试”下方添加“- xxx”，hexo会把分类嵌套（即该文章属于“- 测试”下的“- xxx”分类）。123title: Hexo搭建个人博客categories:- 测试 生成“标签”页并添加tpye属性1hexo new page tags 成功后会提示：1INFO Created: ~/MyBlog/source/tags/index.md 根据上面的路径，找到index.md这个文件，修改为：12345---title: tagsdate: 2018-10-15 11:23:05type: &quot;tags&quot;--- 保存并关闭文件。 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。123456title: Hexo搭建个人博客categories:- 测试 tags:- 博客- hexo 自定义hexo new生成md文件的选项在/scaffolds/post.md文件中添加：123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 修改文章底部带#号的标签修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将#换成1&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt; 添加搜索功能安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：1npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容到末尾：12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能：123# Local searchlocal_search: enable: true 然后重新生成，查看：12$ hexo clean$ hexo s -g 使用本地图片修改_config.yml1post_asset_folder: true 在站点的根目录下（MyBlog文件夹）执行：1npm install https://github.com/CodeFalling/hexo-asset-image --save 存放图片的目录名与文章名保持一致，例如12345MacGesture2-Publish├── apppicker.jpg├── logo.jpg└── rules.jpgMacGesture2-Publish.md 使用 ![logo](logo.jpg)就可以插入图片。 添加评论功能 在来必力官网注册一个账号，选择免费的city版本安装。 复制其中的uid字段。 打开主题配置文件，定位到livere_uid字段，粘贴上刚刚复制的uid。 修改source/tags/index.md 设置侧边栏社交编辑主题配置文件，定位到字段social，然后添加社交站点名称与地址即可。1234# Social linkssocial: GitHub: https://github.com/crystalww || github ... 编辑主题配置文件，在social_icons字段下添加社交站点名称（注意大小写）与图标。12345678social_icons: enable: true icons_only: false transition: false GitHub: github Twitter: twitter Weibo: weibo Linkedin: linkedin 图标名称可以参考：http://fontawesome.io/cheatsheet/。 推送到Github上修改站点配置文件：1234deploy: type: git repository: https://github.com/Crystalww/crystalww.github.io.git branch: master 然后执行以下命令：123npm install hexo-deployer-git --save # 安装git部署插件hexo g # 本地生成静态文件hexo d # 将本地静态文件推送至Github 完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 username.github.io。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
