<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[openstack镜像操作]]></title>
    <url>%2F2018%2F11%2F14%2Fopenstack2%2F</url>
    <content type="text"><![CDATA[在部署好openstack后需要镜像来创建实例，CentOS、Ubuntu等系统有官方维护的镜像，windows系统的镜像则需要自己制作。下面是我在CentOS7上制作XP系统和win7系统的记录。 环境准备关闭selinux 查看selinux状态：sestatus临时关闭：setenforce 0永久关闭：vi /etc/selinux/config，设置SELINUX=disabled显示当前SELinux的应用模式（强制、执行还是停用）：getenforce检测系统是否支持KVM：egrep -o &#39;(vmx|svm)&#39; /proc/cpuinfo 关闭防火墙 systemctl status firewalldsystemctl stop firewalldsystemctl disable firewalld 安装必要的软件 yum install -y virt-install virt-manager libvirt qemu-kvm tree 修改/etc/libvirt/qemu.conf vnc_listen =”0.0.0.0” 开启libvirtd systemctl start libvirtdsystemctl enable libvirtd 创建目录，便于合理存储资源123456[root@dep centos]# mkdir -p /var/lib/libvirt/images/&#123;iso,virtual&#125;[root@dep centos]# tree /var/lib/libvirt/images//var/lib/libvirt/images/├── iso└── virtual 创建空磁盘123[root@dep centos]# cd /var/lib/libvirt/[root@dep libvirt]# qemu-img create -f qcow2 images/virtual/winxp.qcow2 10G[root@dep libvirt]# qemu-img create -f qcow2 images/virtual/win7_x64.qcow2 10G 把xp系统和Virtio的iso镜像上传到服务器中 window和centos系统间传文件可以用winscp工具。 12345678910[root@dep libvirt]# tree images/images/├── iso│ ├── virtio-win-0.1.126_x86.vfd│ ├── virtio-win-0.1.141.iso│ ├── win7_professional_x64.iso│ └── zh-hans_windows_xp_professional_with_service_pack_3_x86_cd_x14-80404.iso└── virtual ├── win7_x64.qcow2 └── winxp.qcow2 制作xp系统官方给的是windows server2012的封装，照着它的顺序做，Boot Option里面没有系统镜像，这里参考了《4.2 安装第一个KVM虚拟化Guest操作系统》。XP的安装程序只支持从软盘加载驱动程序，因此需要一个软盘的镜像文件，在KVM启动的时候进行加载。12345678910[root@test centos]# virt-install --connect qemu:///system \--name winxp --ram 2048 --vcpus 2 \--network network=default,model=virtio \--disk path=images/virtual/winxp.qcow2,format=qcow2,device=disk,bus=virtio \--disk path=images/iso/virtio-win-0.1.126_x86.vfd,device=floppy \--disk path=images/iso/zh-hans_windows_xp_professional_with_service_pack_3_x86_cd_x14-80404.iso,device=cdrom \--disk path=images/iso/virtio-win-0.1.141.iso,device=cdrom \--boot cdrom,hd,menu=on \--graphics vnc,listen=0.0.0.0 --noautoconsole \--os-type windows --os-variant winxp --boot选项可以通过man virt-install查询到。它指定机器的启动顺序，cdrom是光驱，hd为硬盘，menu是bios boot menu。--graphics vnc这一行表示可以用vnc远程连接 获取vnc端口号 12345[root@ocata mouri]# virsh vncdisplay winxp:0[root@dep centos]# virsh domdisplay winxpvnc://localhost:0 用vncviewer连接，输入centos的ip+端口号，如我的为：192.168.89.111:0。 如果centos是图形界面的，也可以用virt-manager和virt-viewer来安装系统。下面的命令也可用：12345678910# 若本机不支持虚拟化，请将virt-type选项更改为qemu[root@ocata libvirt]# virt-install --virt-type kvm \--name winxp --ram 2048 --vcpus 2 \--network network=default,model=virtio \--disk path=images/virtual/winxp.qcow2,format=qcow2,device=disk,bus=virtio \--disk path=images/iso/virtio-win-0.1.126_x86.vfd,device=floppy \--disk path=images/iso/zh-hans_windows_xp_professional_with_service_pack_3_x86_cd_x14-80404.iso,device=cdrom \--disk path=images/iso/virtio-win-0.1.141.iso,device=cdrom \--os-type=windows --os-variant=winxp \--graphics vnc,listen=0.0.0.0 --noautoconsole 安装过程可能会重启，我的关机之后没有自己启动，需要手动开启，再用VNC Viewer连接。1234567[root@ocata libvirt]# virsh list --all Id 名称 状态---------------------------------------------------- - winxp 关闭[root@ocata libvirt]# virsh start winxp域 winxp 已开 安装完成进入计算机管理把驱动程序安装好，选择驱动程序镜像所在盘自动安装即可。下一步就是安装cloudbase-init，问题是怎么把文件传入到winxp系统中，可以参考虚拟机镜像管理工具– Libguestfs。但是centos7中guestmount已经不支持NTFS的镜像了(mount: unsupported filesystem type” with NTFS in RHEL ≥ 7.2)。也可以在xp系统中上网下载，但是IE半天打不开网页，给换了世界之窗的浏览器。打开IE–&gt;工具–&gt;Internet选项–&gt;高级–&gt;勾选使用TLS1.0。然后输入世界之窗浏览器的网址下载。 安装过程中选项：Username：Administrator；Serial port for logging：COM1；勾选Run Cloudbase-init service as LocalSystem；耐心等待安装完成 并没有Run Sysprep与Shutdown可以勾选，用安装镜像中的support–&gt;tools下的sysprep封装，但是没有可用的密钥，到这一步封装进行不下去了。 win7系统制作123456789[root@test centos]# virt-install --connect qemu:///system \--name win7_x64 --ram 2048 --vcpus 2 \--network network=default,model=virtio \--disk path=images/virtual/win7_x64.qcow2,format=qcow2,device=disk,bus=virtio \--disk path=images/iso/win7_professional_x64.iso,device=cdrom \--disk path=images/iso/virtio-win.iso,device=cdrom \--boot cdrom,hd,menu=on \--graphics vnc,listen=0.0.0.0 --noautoconsole \--os-type windows --os-variant win7 也可用下面的命令123456789# 若本机不支持虚拟化，请将&lt;virt-type&gt;选项更改为&lt;qemu&gt;[root@test centos]# virt-install --virt-type kvm \--name win7_x64 --ram 2048 --vcpus 2 \--network network=default,model=virtio \--disk path=images/virtual/win7_x64.qcow2,format=qcow2,device=disk,bus=virtio \--disk path=images/iso/win7_professional_x64.iso,device=cdrom \--disk path=images/iso/virtio-win.iso,device=cdrom \--boot cdrom,hd,menu=on \--graphics vnc,listen=0.0.0.0 --noautoconsole 现在安装 自定义 加载驱动程序，选择E盘（virtio所在磁盘）下的visitor对应的系统的amd64或x86文件夹，加载驱动完成即可检测到磁盘 安装完成后，会自动重启，设置账户及密码，进入桌面系统。此时，虚拟机还需要安装网卡等驱动，在设备管理器中更新驱动程序，选择VirtIO驱动位置更新即可。 win7鼠标重影，先关机，找到配置文件12[root@dep libvirt]# find / -name &quot;win7.xml&quot;/etc/libvirt/qemu/win7.xml 添加usbtablet1234&lt;input type=&apos;tablet&apos; bus=&apos;usb&apos;&gt; &lt;address type=&apos;usb&apos; bus=&apos;0&apos; port=&apos;1&apos;/&gt;&lt;/input&gt;&lt;input type=&apos;mouse&apos; bus=&apos;ps2&apos;/&gt; 然后导入配置[root@dep libvirt]# virsh define /etc/libvirt/qemu/win7.xml，重启使配置生效。 安装cloudinit，完成后勾选Run Sysprep与Shutdown，点击Finish；123456789101112# 使虚拟机脱离libvirt管理[root@dep libvirt]# virsh undefine win7_x64# libguestfs-tools的安装[root@dep libvirt]# yum -y install libguestfs-tools# 消除映像空洞[root@dep libvirt]# virt-sparsify -x images/virtual/winxp.qcow2 --convert qcow2 images/virtual/winxp.qcow2.tmp[root@dep libvirt]# virt-sparsify -x images/virtual/win7_x64.qcow2 --convert qcow2 images/virtual/win7_x64.qcow2.tmp# 压缩映像[root@dep libvirt]# qemu-img convert -c -p -O qcow2 images/virtual/winxp.qcow2.tmp images/virtual/winxp.img[root@dep libvirt]# qemu-img convert -c -p -O qcow2 images/virtual/win7_x64.qcow2.tmp images/virtual/win7_x64.img 123456789# 将映像重新加入libvirt管理virt-install --name win7_x64 \ --virt-type kvm \ --ram 2048 \ --vcpus=2 \ --network network=default \ --graphics vnc,listen=0.0.0.0 --noautoconsole \ --import \ --disk images/virtual/win7_x64.qcow2,format=qcow2 常用命令12345678910111213141516171819# 查看网络virsh net-list# 列出机器所有已安装的虚拟机virsh list --all # 启动虚拟机virsh start ubuntu# 关闭虚拟机virsh shutdown ubuntu# 重启虚拟机virsh reboot ubuntu# 删除虚拟机和创建的镜像文件virsh destroy winxpvirsh undefine winxprm winxp.qcow2 踩坑记录 1 （virt-install）ERROR Network not found: no network with matching name ‘default’ 查找与network和libvirt有关的default.xml[root@ocata libvirt]# find / -name &quot;default.xml&quot; 从XML文件中定义一个网络[root@ocata libvirt]# virsh net-define /usr/share/libvirt/networks/default.xml 启动default网络[root@ocata libvirt]# virsh net-start default 查看网络是否启动成功[root@ocata libvirt]# virsh net-list 2 centos中virsh vncdisplay winxp返回了vnc端口号，但是物理机中VNC Viewer连接不了centos中的winxp 关闭centos中的selinux和防火墙，去掉/etc/libvirt/qemu.conf中#vnc_listen = &quot;0.0.0.0&quot;的注释。 3 制作win7镜像时通过virt-viewer看到并没有进入安装程序，提示”No bootable device” 原因是没有指定光盘启动，可以通过virt-manager工具配置；也可以加上–boot参数，同时如果有多个iso镜像，系统安装包镜像参数要用--disk path=/path/to/iso,device=cdrom的形式。 镜像操作想知道通过horizon上传的镜像存哪去了，可以查看glance的配置文件12[root@centos ~]# cat /etc/kolla/glance-api/glance-api.conf | grep imagefilesystem_store_datadir = /var/lib/glance/images/ 通过[root@centos ~]# docker inspect glance_api查看”Mounts”字段123456789101112131415161718&quot;Mounts&quot;: [ &#123; &quot;Source&quot;: &quot;/etc/localtime&quot;, &quot;Destination&quot;: &quot;/etc/localtime&quot;, &quot;Mode&quot;: &quot;ro&quot;, &quot;RW&quot;: false, &quot;Propagation&quot;: &quot;rprivate&quot; &#125;, &#123; &quot;Name&quot;: &quot;glance&quot;, &quot;Source&quot;: &quot;/var/lib/docker/volumes/glance/_data&quot;, &quot;Destination&quot;: &quot;/var/lib/glance&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;rw&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;rprivate&quot; &#125;, ... 可以看到容器中存放image的目录对应的本地目录，查看本地目录下的文件12345678910[root@centos ~]# ls -lh /var/lib/docker/volumes/glance/_data/images/total 29G-rw-r-----. 1 42415 42415 5.1G Nov 12 18:40 058f6740-3cde-4d4e-826c-416cab9bdf06-rw-r-----. 1 42415 42415 1.7G Nov 12 20:30 2c5f7617-506b-4b4e-bafe-ec180b77f9e3-rw-r-----. 1 42415 42415 8.3G Nov 12 20:08 36ebf445-d410-4c30-8650-f46a814f10b3-rw-r-----. 1 42415 42415 4.4G Nov 11 20:31 60b6654a-b342-4f5e-80df-0b2cd1a7b51d-rw-r-----. 1 42415 42415 13M Nov 7 16:38 63f0a9f8-7f4c-4243-954e-00446de8a70c-rw-r-----. 1 42415 42415 2.0G Nov 14 10:06 8e7ebf4e-c2e8-47dc-9d24-d5376946ee43-rw-r-----. 1 42415 42415 5.3G Nov 11 20:50 98c6b078-6aa3-4759-8013-ad060a0cffe3-rw-r-----. 1 42415 42415 1.8G Nov 7 16:43 fbef4306-061b-486b-ab44-c567fc2aac10 由于我是用部署机（deploy）给另一台机器部署openstatck，所以在deploy上操作：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273[root@dep ~]# . /etc/kolla/admin-openrc.sh # 查看镜像列表[root@dep ~]# glance image-list+--------------------------------------+----------------+| ID | Name |+--------------------------------------+----------------+| 8e7ebf4e-c2e8-47dc-9d24-d5376946ee43 | centos6.5 || 60b6654a-b342-4f5e-80df-0b2cd1a7b51d | centos7 || 63f0a9f8-7f4c-4243-954e-00446de8a70c | cirros || 36ebf445-d410-4c30-8650-f46a814f10b3 | kali || fbef4306-061b-486b-ab44-c567fc2aac10 | metasploitable || 058f6740-3cde-4d4e-826c-416cab9bdf06 | ubuntu16.04 || 98c6b078-6aa3-4759-8013-ad060a0cffe3 | win7 || 2c5f7617-506b-4b4e-bafe-ec180b77f9e3 | winxp |+--------------------------------------+----------------+# 查看cirros镜像详细信息（[root@dep ~]# openstack image show cirros）[root@dep ~]# glance image-show 63f0a9f8-7f4c-4243-954e-00446de8a70c+------------------+--------------------------------------+| Property | Value |+------------------+--------------------------------------+| checksum | ee1eca47dc88f4879d8a229cc70a07c6 || container_format | bare || created_at | 2018-11-07T08:38:10Z || disk_format | qcow2 || id | 63f0a9f8-7f4c-4243-954e-00446de8a70c || min_disk | 0 || min_ram | 0 || name | cirros || owner | 74615a486948450092e5dd0ba9e077e9 || protected | False || size | 13287936 || status | active || tags | [] || updated_at | 2018-11-07T08:38:10Z || virtual_size | Not available || visibility | public |+------------------+--------------------------------------+# 下载cirros镜像到/home目录下[root@dep ~]# glance image-download --file /home/test.img 63f0a9f8-7f4c-4243-954e-00446de8a70c# 查看下载镜像的大小[root@dep ~]# du -sh /home/test.img 13M /home/test.img# 上传镜像[root@dep ~]# glance image-create --name &quot;test&quot; --disk-format qcow2 --container-format bare --progress &lt; /home/test.img [=============================&gt;] 100%+------------------+--------------------------------------+| Property | Value |+------------------+--------------------------------------+| checksum | ee1eca47dc88f4879d8a229cc70a07c6 || container_format | bare || created_at | 2018-11-14T03:56:24Z || disk_format | qcow2 || id | b5ca651f-b45e-4269-b7c9-ea671744fb85 || min_disk | 0 || min_ram | 0 || name | test || owner | 74615a486948450092e5dd0ba9e077e9 || protected | False || size | 13287936 || status | active || tags | [] || updated_at | 2018-11-14T03:56:25Z || virtual_size | Not available || visibility | shared |+------------------+--------------------------------------+# 删除镜像[root@dep ~]# glance image-delete b5ca651f-b45e-4269-b7c9-ea671744fb85 参考资料[1]. 制作OpenStack云主机映像的指南[2]. KVM 安装windows XP 系统[3]. Openstack镜像制作之windows7篇[4]. 为openstack制作windows镜像]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openstack虚拟机鼠标指针问题]]></title>
    <url>%2F2018%2F11%2F12%2Fopenstack1%2F</url>
    <content type="text"><![CDATA[openstack（Ocata）创建实例，如果是windows系统，桌面会出现两个鼠标，操作不便。原因在于鼠标驱动程序为PS/2兼容鼠标，而实际使用的是usb鼠标。因为我是用kolla部署的openstack，配置文件与手动安装方式相比略有不同。查阅相关资料，主要有以下几种解决方法： 直接修改镜像，附加属性，再用该镜像生成虚拟机。用kolla部署的话，需要在deploy上操作，安装openstack cli client相关依赖（见上一篇）。openstack image set --property hw_pointer_model=usbtablet 927e8608-768f-4415-871b-0fc2cce79a14 最后一个参数为镜像id修改之后如下然后创建虚拟机，发现问题并没有解决~~~ 直接修改虚拟机配置文件先创建一个实例（虚拟机），虚拟机配置文件一般存放在libvirt的qemu文件夹下，是创建虚拟机的时候自动生成的，如/etc/libvirt/qemu/instance-00000005.xml。 进入nova_libvirt容器[root@centos ~]# docker exec -itu root nova_libvirt /bin/bash 修改虚拟机配置文件(nova-libvirt)[root@centos /]# vi /etc/libvirt/qemu/instance-00000005.xml定位到&lt;input&gt;标签，在前面添加&lt;input type=&#39;tablet&#39; bus=&#39;usb&#39;/&gt;，保存的时候你会发现报错：&quot;internal error: No free USB ports&quot;。对比手动安装的，应该要添加的语句如下，然后删掉&lt;input type=&#39;mouse&#39; bus=&#39;ps2&#39;/&gt;。 123&lt;input type=&apos;tablet&apos; bus=&apos;usb&apos;&gt; &lt;address type=&apos;usb&apos; bus=&apos;0&apos; port=&apos;1&apos;/&gt;&lt;/input&gt; 保存配置后重启容器[root@centos ~]# docker restart nova_libvirt软重启实例，然后鼠标正常了。但是这样有个缺点，每次创建都要改配置文件非常麻烦，而且配置文件也不建议修改（动态生成，会被覆盖掉）。 修改nova配置文件（推荐） 修改/etc/kolla/nova-compute/nova.conf文件在[DEFAULT]下添加pointer_model = usbtablet官方文档中有这么一段话 1usbtablet must be configured with VNC enabled or SPICE enabled and SPICE agent disabled. When used with libvirt the instance mode should be configured as HVM. 在[spice]下添加agent_enabled=false。忽略这一步导致浪费了很多时间啊！！！ 重启nova_compute容器[root@centos ~]# docker restart nova_compute 参考资料 openstack 填坑笔记4：windows 实例运行出现两个鼠标，重影难于对焦 use_usb_tablet=true have no effect]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[调整CentOS根目录大小]]></title>
    <url>%2F2018%2F11%2F09%2Fresize%2F</url>
    <content type="text"><![CDATA[安装CentOS时使用了默认分区，结果发现root目录空间太小，创建虚拟机实例申请不到磁盘，在此记录如何调整CentOS root目录的大小。 查看分区 12345678910[root@centos centos]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/centos-root 50G 23G 28G 46% /devtmpfs 16G 0 16G 0% /devtmpfs 16G 0 16G 0% /dev/shmtmpfs 16G 21M 16G 1% /runtmpfs 16G 0 16G 0% /sys/fs/cgroup/dev/sda1 1014M 222M 793M 22% /boot/dev/mapper/centos-home 857G 37M 856G 1% /hometmpfs 3.2G 12K 3.2G 1% /run/user/42 备份home分区文件[root@centos ~]# tar cvf /tmp/home.tar /home注意检查是否备份成功 卸载/home目录终止使用/home文件系统的进程，再卸载。 12345[root@centos ~]# fuser -km /home[root@centos ~]# umount /home[root@centos ~]# df -h 删除/home所在的lv[root@centos ~]# lvremove /dev/mapper/centos-home 查看空闲磁盘大小 123456789101112131415161718192021[root@centos ~]# vgdisplay --- Volume group --- VG Name centos System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 5 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size &lt;930.00 GiB PE Size 4.00 MiB Total PE 238079 Alloc PE / Size 18832 / 73.56 GiB Free PE / Size 219247 / 856.43 GiB VG UUID zNMW93-KFCC-qpQB-Txho-d86c-6Rh7-wSU7dK 扩展/root所在的lv[root@centos ~]# lvextend -L +800G /dev/mapper/centos-root 扩展/root文件系统[root@centos ~]# xfs_growfs /dev/mapper/centos-root再次df -h可以看到/root大小已经改变了 重新创建home lv[root@centos ~]# lvcreate -L 56.43GiB -n /dev/mapper/centos-home 创建文件系统[root@centos ~]# mkfs.xfs /dev/mapper/centos-home 挂载homemount /dev/mapper/centos-home home文件恢复[root@centos /]# tar xvf /tmp/home.tar -C ./]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建docker仓库]]></title>
    <url>%2F2018%2F10%2F31%2Fdocker%2F</url>
    <content type="text"><![CDATA[在使用kolla部署openstack时要下载很多镜像，部署时间长短容易受网速影响。提前下载所有镜像或在第一次部署完成下载所有镜像后把镜像上传到本地私有docker仓库，可以加快后面再次部署需要的时间。 CentOS7安装docker要求：系统为64位、内核版本为 3.10 以上。 查看你当前的内核版本uname -r 安装 Dockeryum -y install docker 启动 Docker 后台服务service docker start 设置开机自启动systemctl enable docker 测试运行 hello-world由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。docker run hello-world 搭建本地仓库 获取官方registry镜像docker pull registry 启动容器默认情况下，仓库会被创建在容器的 /var/lib/registry 目录下。你可以通过 -v 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 /opt/data/registry 目录。 1docker run -d -p 5000:5000 --privileged=true --restart=always --name registry -v /opt/data/registry:/var/lib/registry registry 在本机查看已有的镜像 1234[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/registry latest 2e2f252f3c88 6 weeks ago 33.3 MBdocker.io/hello-world latest 4ab4c602aa5e 6 weeks ago 1.84 kB 标记本地镜像 123456[root@localhost ~]# docker tag docker.io/hello-world 192.168.89.149:5000/docker.io/hello-world[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/registry latest 2e2f252f3c88 6 weeks ago 33.3 MB192.168.89.149:5000/docker.io/hello-world latest 4ab4c602aa5e 6 weeks ago 1.84 kBdocker.io/hello-world latest 4ab4c602aa5e 6 weeks ago 1.84 kB 修改/etc/docker/daemon.json，并重启docker（如果重启失败，将daemon.json重命名为daemon.conf） 1234567&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;192.168.89.149:5000&quot;]&#125;[root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker 上传标记镜像 1234[root@localhost ~]# docker push 192.168.89.149:5000/docker.io/hello-worldThe push refers to a repository [192.168.89.149:5000/docker.io/hello-world]428c97da766c: Pushed latest: digest: sha256:1a6fd470b9ce10849be79e99529a88371dff60c60aab424c077007f6979b4812 size: 524 用 curl 查看仓库中的镜像。 12345[root@localhost ~]# curl 127.0.0.1:5000/v2/_catalog&#123;&quot;repositories&quot;:[&quot;docker.io/hello-world&quot;]&#125;[root@localhost ~]# curl 127.0.0.1:5000/v2/kolla/centos-source-haproxy/tags/list&#123;&quot;name&quot;:&quot;kolla/centos-source-haproxy&quot;,&quot;tags&quot;:[&quot;rocky&quot;,&quot;ocata&quot;]&#125; 先删除已有镜像，再尝试从私有仓库中下载这个镜像。 123[root@localhost ~]# docker rmi 192.168.89.149:5000/docker.io/hello-world[root@localhost ~]# docker pull 192.168.89.149:5000/docker.io/hello-world 将下载好的openstack镜像存储到仓库中1234# 标记镜像docker images | grep -v TAG | awk &apos;&#123;print $1,$2&#125;&apos; OFS=&apos;:&apos; | xargs -I &#123;&#125; docker tag &#123;&#125; &apos;192.168.89.149:5000/&apos;&#123;&#125;# 上传镜像docker images | grep -v TAG | grep 192 | awk &apos;&#123;print $1,$2&#125;&apos; OFS=&apos;:&apos; | xargs -I &#123;&#125; docker push &#123;&#125;]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用kolla部署openstack（一）]]></title>
    <url>%2F2018%2F10%2F29%2Fopenstack%2F</url>
    <content type="text"><![CDATA[实验环境最近在折腾kolla部署容器化的openstack，遇到的坑实在是太多了，在虚拟机中把可能遇到的问题都查了一遍才敢部署到物理机上。但还是没搞明白为什么虚拟机中virt_type只能为qemu才可以创建instance。有兴趣的建议先在VMware Workstation中尝试，处理器开启虚拟化Intel VT-x/EPT或AMD-V/RVI(V)，所有操作在root下进行。虚拟机配置如下：123456系统：CentOS 7内存：16GB处理器：4 硬盘：100GB网卡1：桥接模式网卡2：桥接模式 修改CentOS默认yum源 1 备份默认yum源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup2 下载阿里云的yum源配置文件到/etc/yum.repos.d/wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo3 本地缓存服务器上的软件包信息yum makecache4 更新yum -y update 修改 ~/.pip/pip.conf（没有就创建一个）12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 修改/etc/hostname和/etc/hosts hosts中写用到的主机的ip和hostname，部署用到的每台主机都要改。 关闭selinux 临时关闭：setenforce 0永久关闭：改配置文件/etc/selinux/config,将其中SELINUX设置为disabled。 关闭防火墙123systemctl status firewalldsystemctl stop firewalldsystemctl disable firewalld 以上步骤完成后就可以按照OpenStack Docs的Quick Start（For development）部分进行操作了。如果是多节点部署，在deploy主机上执行以下命令：12345678910111213141516171819202122232425262728293031323334# 安装pip并更新到最新yum install -y epel-releaseyum install -y python-pippip install -U pip# 安装依赖yum install -y python-devel libffi-devel gcc openssl-devel libselinux-python# 安装ansibleyum install -y ansible# 更新ansible到最新pip install -U ansible# 在ansible配置文件/etc/ansible/ansible.cfg中增加信息（可选）[defaults]host_key_checking=Falsepipelining=Trueforks=100# 安装Kolla-ansiblegit clone https://github.com/openstack/kolla -b stable/rockygit clone https://github.com/openstack/kolla-ansible -b stable/rocky# 安装kolla和kolla-ansible的requirementspip install -r kolla/requirements.txtpip install -r kolla-ansible/requirements.txt# 把kolla-ansible的配置文件（globals.yml、passwords.yml）复制到/etc/kolla中mkdir -p /etc/kollacp -r kolla-ansible/etc/kolla/* /etc/kolla# 复制（all-in-one、multinode）到当前目录下cp kolla-ansible/ansible/inventory/* . 修改配置信息单节点部署修改all-in-one文件：1234567891011121314151617[control]localhost ansible_connection=local[network]localhost ansible_connection=local[external-compute]localhost ansible_connection=local[storage]localhost ansible_connection=local[monitoring]localhost ansible_connection=local[deployment]localhost ansible_connection=local 多节点部署修改mutinode文件：123456789101112131415161718[control]# These hostname must be resolvable from your deployment hostcontrol2 ansible_user=root ansible_password=123 ansible_become=true[network]control2 ansible_user=root ansible_password=123 ansible_become=true[external-compute]control2 ansible_user=root ansible_password=123 ansible_become=true[monitoring]control2 ansible_user=root ansible_password=123 ansible_become=true[storage]control2 ansible_user=root ansible_password=123 ansible_become=true[deployment]localhost ansible_connection=local ansible_become=true 检查配置文件信息是否正确 ansible -i multinode all -m ping 生成随机密码，密码存放于/etc/kolla/passwords.yml中。修改此文件中keystone_admin_password字段值为admin。 ./kolla-ansible/tools/generate_passwords.py 修改/etc/kolla/globals.yml123456789101112kolla_base_distro: &quot;centos&quot;kolla_install_type: &quot;source&quot;openstack_release: &quot;rocky&quot; # openstack_release版本与你clone的kolla和kolla-ansible的版本对应network_interface: &quot;eth0&quot; # 内网neutron_external_interface: &quot;eth1&quot; # 外网kolla_internal_vip_address: &quot;内网ip&quot; # 确保ip未被占用，这也是用于访问horizon的ipnova_console: &quot;spice&quot;enable_horizon: &quot;yes&quot;nova_compute_virt_type: &quot;kvm&quot; # 如果是虚拟机，只能用qemu代替kvm，否则实例启动会卡在：Booting from Hard Disk...docker_registry: &quot;ip:port&quot; # 如果有私有docker仓库，部署过程会更快enable_cinder: &quot;yes&quot; # 块存储，这里还不怎么懂！！！ 在下面Bootstrap servers步骤后，修改被部署openstack机器上/etc/docker/daemon.json，并重启docker1234&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;192.168.89.149:5000&quot;]&#125; 部署1234567891011# 1. Bootstrap servers with kolla deploy dependencies./kolla-ansible/tools/kolla-ansible -i multinode bootstrap-servers# 2. 对主机进行部署前检查（kolla_internal_vip_address如果被占用会失败）./kolla-ansible/tools/kolla-ansible -i multinode prechecks# 3. 进行openstack部署./kolla-ansible/tools/kolla-ansible -i multinode deploy# 4. 如果部署失败，销毁失败的部署./kolla-ansible/tools/kolla-ansible -i &lt;&lt;inventory-file&gt;&gt; destroy 部署成功后输入虚拟ip地址即可进入dashboard。 扩展节点如果增加了几台服务器用作计算节点或者存储节点，要怎么部署进去呢？ 进行部署操作的第一、二步，在此过程可能会卡在安装pip这里，进服务器手动安装yum install -y python-pip即可。 然后进行upgrade而不是重新deploy./kolla-ansible/tools/kolla-ansible -i multinode upgrade kolla部署OpenStack Ocata版本注意事项 安装完后需要在/etc/kolla/nova-compute/nova.conf中[libvirt]下添加virt_type = qemu。 确保selinux关闭，否则部署完成实例创建失败 修改kolla-ansible/ansible/roles/haproxy/tasks/precheck.yml中的always_run: True为run_once: true，否则报错： 12TASK [haproxy : include] *************************************************************************************fatal: [vmc]: FAILED! =&gt; &#123;&quot;reason&quot;: &quot;&apos;always_run&apos; is not a valid attribute for a Task\n\nThe error appears to have been in &apos;/root/kolla-ansible/ansible/roles/haproxy/tasks/precheck.yml&apos;: line 9, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- name: Clearing temp kolla_keepalived_running file\n ^ here\n\nThis error can be suppressed as a warning using the \&quot;invalid_task_attribute_failed\&quot; configuration&quot;&#125; 确保部署openstack的机器上libvirtd停止运行service libvirtd status，service libvirtd stop，否则报错： 123TASK [nova : Checking that libvirt is not running] ***********************************************************fatal: [vmc]: FAILED! =&gt; &#123;&quot;changed&quot;: false, &quot;failed_when_result&quot;: true, &quot;stat&quot;: &#123;&quot;atime&quot;: 1541046790.1479998, &quot;attr_flags&quot;: &quot;&quot;, &quot;attributes&quot;: [], &quot;block_size&quot;: 4096, &quot;blocks&quot;: 0, &quot;charset&quot;: &quot;binary&quot;, &quot;ctime&quot;: 1541046790.1479998, &quot;dev&quot;: 19, &quot;device_type&quot;: 0, &quot;executable&quot;: true, &quot;exists&quot;: true, &quot;gid&quot;: 0, &quot;gr_name&quot;: &quot;root&quot;, &quot;inode&quot;: 37921, &quot;isblk&quot;: false, &quot;ischr&quot;: false, &quot;isdir&quot;: false, &quot;isfifo&quot;: false, &quot;isgid&quot;: false, &quot;islnk&quot;: false, &quot;isreg&quot;: false, &quot;issock&quot;: true, &quot;isuid&quot;: false, &quot;mimetype&quot;: &quot;inode/socket&quot;, &quot;mode&quot;: &quot;0777&quot;, &quot;mtime&quot;: 1541046790.1479998, &quot;nlink&quot;: 1, &quot;path&quot;: &quot;/var/run/libvirt/libvirt-sock&quot;, &quot;pw_name&quot;: &quot;root&quot;, &quot;readable&quot;: true, &quot;rgrp&quot;: true, &quot;roth&quot;: true, &quot;rusr&quot;: true, &quot;size&quot;: 0, &quot;uid&quot;: 0, &quot;version&quot;: null, &quot;wgrp&quot;: true, &quot;woth&quot;: true, &quot;writeable&quot;: true, &quot;wusr&quot;: true, &quot;xgrp&quot;: true, &quot;xoth&quot;: true, &quot;xusr&quot;: true&#125;&#125; to retry, use: --limit @/root/kolla-ansible/ansible/site.retry 修改kolla-ansible/ansible/roles/mariadb/tasks/lookup_cluster.yml文件，删除所有的always_run: True，否则报错： 123TASK [mariadb : include] *************************************************************************************fatal: [vmc]: FAILED! =&gt; &#123;&quot;reason&quot;: &quot;&apos;always_run&apos; is not a valid attribute for a Task\n\nThe error appears to have been in &apos;/root/kolla-ansible/ansible/roles/mariadb/tasks/lookup_cluster.yml&apos;: line 2, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n---\n- name: Cleaning up temp file on localhost\n ^ here\n\nThis error can be suppressed as a warning using the \&quot;invalid_task_attribute_failed\&quot; configuration&quot;&#125; to retry, use: --limit @/root/kolla-ansible/ansible/site.retry 在虚拟机上部署过程中会可能网卡出现问题（ping不通）导致部署失败，重启网卡即可 12345678910# networkservice network restart# ifdown/ifupifdown eth0ifup eth0# ifconfigifconfig eth0 downifconfig eth0 up 调整 如果需要访问外部网络，123供应商类型：Flat物理网络：physnet1 （/etc/kolla/neutron-server/ml2_conf.ini中flat_networks字段值）添加内部接口（子网网关） 开启多域支持，修改/etc/kolla/horizon/local_settings，重启horizon容器。1OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True VMWare虚拟机迁移到openstack：将vmdk转换成qcow2格式的镜像，再上传即可用来创建实例12qemu-img convert -f vmdk -O qcow2 Metasploitable.vmdk Metasploitable.imgqemu-img info Metasploitable.img Horizon登陆超过一小时需要重新登录，改为24小时修改/etc/kolla/horizon/local_settings，添加SESSION_TIMEOUT = 86400修改/etc/kolla/keystone/keystone.conf如下，重启horizon、keystone容器123[token]...expiration = 86400 注意：kolla-ansible方式安装的openstack（P版本及以后）访问API（endpoint）与之前版本不一样，在用openstack4j(V3.1.0)认证时获取不到信息，需要自己修改endpoint。下面操作在deploy上面进行：1234567891011121314151617181920212223# Install basic OpenStack CLI clients:pip install python-openstackclient python-glanceclient python-neutronclient# generate an openrc filecd kolla-ansible/tools./kolla-ansible post-deploy. /etc/kolla/admin-openrc.sh# 查看及修改端点信息[root@deploy tools]# openstack endpoint list[root@deploy tools]# openstack endpoint --help[root@deploy tools]# openstack endpoint set --help# 查看实例[root@deploy ~]# nova list# 查看hypervisor类型[root@deploy ~]# openstack hypervisor list# 查看服务列表[root@deploy ~]# openstack service list[root@deploy ~]# nova service-list[root@deploy ~]# openstack compute service list 报错信息整理部署过程报错： 安装kolla依赖时报错：cannot uninstall xxx 在命令后加上--ignore-installed xxx再执行一次 TASK [haproxy : Waiting for virtual IP to appear] 编辑/etc/kolla/globals.yml，重新设置keepalived_virtual_router_id的值(Must be free in the network)。 waiting for nova-compute service up… kolla-ansible版本要与openstack_release版本（docker hub中查看tag）一致。pip安装的kolla-ansible（pip show kolla-ansible）、git clone的master版都对应最新的openstack稳定版（现在是rocky） neutron容器启动报错：超时 kolla部署过程会断开外网网卡导致下载不到docker镜像。提前下载镜像自建docker仓库或者network_interface对应的网卡能上网就行 创建实例报错： no valid hosts… 123456789101112131415161. 可能是virt_type=kvm导致的，配置文件/etc/kolla/nova-compute/nova.conf中virt_type改为qemu，重启nova_compute容器[libvirt]connection_uri = qemu+tcp://192.168.89.149/systemvirt_type = qemu2. 也可能是其他原因- nova-compute日志提示ERROR nova.compute.manager [instance: 3af11e19-b4f8-452a-8f3d-3d659be050bd] libvirtError: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken.- libvirtd日志提示2018-11-02 01:14:26.017+0000: 43848: error : virDBusCall:1570 : error from service: CanSuspend: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken.### 解决办法检查节点状态，发现selinux开启了，关闭selinux即可查看selinux状态：sestatus临时关闭：setenforce 0永久关闭：改配置文件/etc/selinux/config,将其中SELINUX设置为disabled。 MessagingTimeout: Timed out waiting for a reply to message ID… 查看nova_compute的日志，如果需要重启容器：docker restart $(docker ps -aq) CentOS 7 packstack - Instance fails, Error: Volume did not finish being created 123(nova-compute)[root@m_controller /]# cat /var/log/kolla/nova/nova-compute.logERROR nova.compute.manager [instance: 3c122d5f-bd92-45c1-ae11-e6ca743a83b1] BuildAbortException: Build of instance 3c122d5f-bd92-45c1-ae11-e6ca743a83b1 aborted: Volume 4a7a123e-8d90-4365-bb11-24688cb3ad3e did not finish being created even after we waited 0 seconds or 1 attempts. And its status is error. 查看nova_compute的日志，应该是卷的原因，可能是卷的存储不够，创建实例时默认开启卷，关掉就好了 参考资料 OpenStack Docs: Quick Start Docker容器化部署运维OpenStack和Ceph CentOS7单节点部署OpenStack-Pike(使用kolla-ansible) Openstack之ubuntu16使用kolla部署实验 kolla-ansible安装openstack(Ocata) Timeout of Horizon web interface when idle]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>openstack</tag>
        <tag>kolla</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础]]></title>
    <url>%2F2018%2F10%2F25%2Fhtml%2F</url>
    <content type="text"><![CDATA[HTML文件基本结构html中的标签一般都是成对出现的，分开始标签和结束标签，标签由英文尖括号&lt;和&gt;括起来。123456789&lt;html&gt; &lt;!-- &lt;html&gt;&lt;/html&gt;称为根标签，所有的网页标签都在&lt;html&gt;&lt;/html&gt;中 --&gt; &lt;head&gt; &lt;!-- 定义文档的头部，头部元素有&lt;title&gt;、&lt;script&gt;、&lt;style&gt;、&lt;link&gt;、&lt;meta&gt; --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 网页的主要内容，如&lt;h1&gt;、&lt;p&gt;、&lt;a&gt;、&lt;img&gt;等 --&gt; &lt;/body&gt;&lt;/html&gt; 常用标签HTML语义化：根据内容的结构化（内容语义化），选择合适的标签（代码语义化），便于开发者阅读和写出更优雅的代码的同时，让浏览器的爬虫和机器很好的解析。 &lt;hx&gt;：标题标签一共有6个，并且依据重要性递减。&lt;h1&gt;为一级标题，是最高的等级。&lt;h6&gt;为六级标题。&lt;h1&gt;标题文本&lt;/h1&gt;&lt;em&gt;：表示强调，默认用斜体表示。&lt;strong&gt;：表示更强烈的强调，用粗体表示。&lt;span&gt;：没有语义，作用是为了设置单独的样式。&lt;q&gt;：短文本引用，浏览器会对q标签自动添加双引号。&lt;blockquote&gt;：长文本引用。&lt;br /&gt;：回车换行。&amp;nbsp;：空格。&lt;hr&gt;：添加水平横线。&lt;address&gt;：地址信息。&lt;code&gt;：单行代码。如果是多行代码，可以使用&lt;pre&gt;标签。&lt;pre&gt;：被包围在pre元素中的文本通常会保留空格和换行符。 无序列表1234&lt;ul&gt; &lt;li&gt;信息&lt;/li&gt; ...&lt;/ul&gt; 有序列表1234&lt;ol&gt; &lt;li&gt;零基础学习html&lt;/li&gt; ...&lt;/ol&gt; &lt;div&gt;：相当于一个容器，存放独立的逻辑部分。用id属性为&lt;div&gt;提供唯一的名称。 &lt;a&gt;标签作用： 实现超链接 链接email地址，使用mailto能让访问者便捷向网站管理者发送电子邮件。如果mailto后面同时有多个参数的话，第一个参数必须以“?”开头，后面的参数每一个都以“&amp;”分隔。1234567&lt;a href="目标网址" title="鼠标滑过显示的文本"&gt;链接显示的文本&lt;/a&gt;&lt;!-- 在新的浏览器窗口中打开网页 --&gt;&lt;a href="目标网址" target="_blank"&gt;click here!&lt;/a&gt;&lt;!-- 链接email地址 --&gt;&lt;a href="mailto:yy@xxx.com?subject=主题&amp;body=内容。"&gt;发送邮件给我&lt;/a&gt; &lt;img&gt;标签：插入图片（可以是GIF，PNG，JPEG格式）。 src标识图像的位置； alt指定图像的描述性文本，当图像不可见时（下载不成功时），可看到该属性指定的文本； title提供在图像可见时对图像的描述(鼠标滑过图片时显示的文本)；1&lt;img src = &quot;myimage.gif&quot; alt = &quot;My Image&quot; title = &quot;My Image&quot; /&gt; 创建表格: table表格在没有添加css样式之前，在浏览器中显示是没有表格线的 &lt;tbody&gt;…&lt;/tbody&gt;：如果不加&lt;thead&gt;&lt;tbody&gt;&lt;tfooter&gt;,table表格加载完后才显示。加上这些表格结构，tbody包含行的内容下载完优先显示，不必等待表格结束后再显示。 &lt;tr&gt;…&lt;/tr&gt;：表格的一行，所以有几对tr，表格就有几行。 &lt;td&gt;…&lt;/td&gt;：表格的一个单元格，一行中包含几对…，说明一行中就有几列。 &lt;th&gt;…&lt;/th&gt;：表格表头，th标签中的文本默认为粗体居中显示。 表格中列的个数，取决于一行中数据单元格的个数。123456789101112131415161718&lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;班级&lt;/th&gt; &lt;th&gt;学生数&lt;/th&gt; &lt;th&gt;平均成绩&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;一班&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;td&gt;89&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;二班&lt;/td&gt; &lt;td&gt;35&lt;/td&gt; &lt;td&gt;85&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; 为表格加入边框123&lt;style type=&quot;text/css&quot;&gt;table tr td,th&#123;border:1px solid #000;&#125;&lt;/style&gt; 为表格添加标题和摘要 摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性(语义化)，使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。 标题用以描述表格内容，标题的显示位置：表格上方。123456789101112131415161718192021&lt;table summary=&quot;本表格记录2012年到2013年库存记录，记录包括U盘和耳机库存量&quot;&gt; &lt;caption&gt;2012年到2013年库存记录&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;产品名称 &lt;/th&gt; &lt;th&gt;品牌 &lt;/th&gt; &lt;th&gt;库存量（个） &lt;/th&gt; &lt;th&gt;入库时间 &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;耳机 &lt;/td&gt; &lt;td&gt;联想 &lt;/td&gt; &lt;td&gt;500&lt;/td&gt; &lt;td&gt;2013-1-2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;U盘 &lt;/td&gt; &lt;td&gt;金士顿 &lt;/td&gt; &lt;td&gt;120&lt;/td&gt; &lt;td&gt;2013-8-10&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 使用表单标签与用户交互 所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在 标签之间，否则用户输入的信息提交不到服务器上。 method ： 数据传送的方式（get/post）。 action ：浏览者输入的数据被传送到的地方,比如一个PHP页面(save.php)。123456&lt;form method=&quot;post&quot; action=&quot;save.php&quot;&gt; &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt; &lt;label for=&quot;pass&quot;&gt;密码:&lt;/label&gt; &lt;input type=&quot;password&quot; name=&quot;pass&quot; /&gt;&lt;/form&gt; 文本输入框 当type=”text”时，输入框为文本输入框；当type=”password”时, 输入框为密码输入框。 name：为文本框命名 value：为文本输入框设置默认值。(一般起到提示作用)1&lt;input type=&quot;text/password&quot; name=&quot;名称&quot; value=&quot;文本&quot; /&gt; 文本域：支持多行文本输入。在css中col可用width、row用height来代替。1&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt; 单选/复选框 当type=”radio”时，控件为单选框；当type=”checkbox”时，控件为复选框。 value：提交数据到服务器的值。 name：为控件命名 当设置 checked=”checked” 时，该选项被默认选中 同一组的单选按钮，name 取值一定要一致，这样同一组的单选按钮才可以起到单选的作用。1&lt;input type=&quot;radio/checkbox&quot; value=&quot;值&quot; name=&quot;名称&quot; checked=&quot;checked&quot;/&gt; 下拉列表框 设置selected=”selected”属性，则该选项被默认选中。 在&lt;select&gt;标签中设置multiple=”multiple”属性可以实现多选功能。 在windows下进行多选时按下Ctrl键同时进行单击（在Mac下使用Command+单击）可以选择多个选项。123456789&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt; &lt;label&gt;爱好:&lt;/label&gt; &lt;select&gt; &lt;option value=&quot;向服务器提交的值&quot;&gt;显示的值&lt;/option&gt; &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt; &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt; &lt;option value=&quot;购物&quot; selected=&quot;selected&quot;&gt;购物&lt;/option&gt; &lt;/select&gt;&lt;/form&gt; 提交按钮：提交表单信息到服务器。&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; 重置按钮：重置表单信息。&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt; form表单中的label标签 不会向用户呈现任何特殊效果 作用是为鼠标用户改进可用性。当用户单击选中该label标签时，自动选中和该label标签相关连的表单控件。&lt;label for=&quot;控件id名称&quot;&gt;12345678910&lt;form&gt; &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot; /&gt; &lt;br /&gt; &lt;label for=&quot;female&quot;&gt;女&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;female&quot; /&gt; &lt;br /&gt; &lt;label for=&quot;email&quot;&gt;输入你的邮箱地址&lt;/label&gt; &lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter email&quot;&gt;&lt;/form&gt;]]></content>
      <categories>
        <category>网页相关</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2018%2F10%2F15%2Fblog%2F</url>
    <content type="text"><![CDATA[准备工作Github创建个人仓库首先要有一个github账号，点击GitHub中的New repository创建新仓库，仓库名为：username.github.io。 安装git在电脑上安装Git客户端，并将Git与Github账号绑定。在命令行中设置user.name和user.email配置信息：12git config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你的Github注册邮箱&quot; 生成ssh密钥文件：1ssh-keygen -t rsa -C &quot;你的Github注册邮箱&quot; 默认不需要设置密码，直接回车即可。然后找到生成的.ssh文件夹中的id_rsa.pub密钥，将内容复制到Github的SSH Key中。在git Bash中检测Github公钥是否设置成功：1ssh git@github.com 如出现以下信息则说明设置成功：1234PS D:\Work\MyBlog&gt; ssh git@github.comPTY allocation request failed on channel 0Hi crystalww! You&apos;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 安装Node.js安装Node.js会默认安装npm。检测是否安装成功可分别输入：node -v 和 npm -v。 使用国内的源（比如淘宝NPM镜像）去替换官方的源以加快下载包的速度。npm config set registry http://registry.npm.taobao.org/ 安装Hexo1npm install -g hexo-cli 创建MyBlog文件夹123hexo inithexo generate 或 hexo ghexo server 或 hexo s 在本地浏览器打开：http://localhost:4000 主题修改下载主题以hexo-next为例，在站点的根目录下（MyBlog文件夹）执行以下命令：1git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题打开站点配置文件(_config.yml)，将themes字段的值修改为next 验证主题12hexo clean # 清除 Hexo 的缓存hexo s --debug # 启动 Hexo 本地站点，并开启调试模式 使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。 个性化配置（参考Next主题配置）选择Scheme更改主题配置文件(themes/next/_config.yml)，搜索scheme字段，去掉需要启动的scheme前的注释即可。12345# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 修改站点配置文件12345678# Sitetitle: 标题subtitle:description:keywords:author: 作者language: zh-Hanstimezone: Asia/Shanghai 添加标签和分类修改主题配置文件中的menu123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 生成“分类”页并添加type属性1hexo new page categories 成功后会提示1INFO Created: ~/MyBlog/source/categories/index.md 根据上面的路径，找到index.md这个文件，修改为：12345---title: categoriesdate: 2018-10-15 11:17:11type: &quot;categories&quot;--- 保存并关闭文件。 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。hexo一篇文章只能属于一个分类，如果在“- 测试”下方添加“- xxx”，hexo会把分类嵌套（即该文章属于“- 测试”下的“- xxx”分类）。123title: Hexo搭建个人博客categories:- 测试 生成“标签”页并添加tpye属性1hexo new page tags 成功后会提示：1INFO Created: ~/MyBlog/source/tags/index.md 根据上面的路径，找到index.md这个文件，修改为：12345---title: tagsdate: 2018-10-15 11:23:05type: &quot;tags&quot;--- 保存并关闭文件。 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。123456title: Hexo搭建个人博客categories:- 测试 tags:- 博客- hexo 自定义hexo new生成md文件的选项在/scaffolds/post.md文件中添加：123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 修改文章底部带#号的标签修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将#换成1&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt; 添加搜索功能安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：1npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容到末尾：12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能：123# Local searchlocal_search: enable: true 然后重新生成，查看：12$ hexo clean$ hexo s -g 使用本地图片修改_config.yml1post_asset_folder: true 在站点的根目录下（MyBlog文件夹）执行：1npm install https://github.com/CodeFalling/hexo-asset-image --save 存放图片的目录名与文章名保持一致，例如12345MacGesture2-Publish├── apppicker.jpg├── logo.jpg└── rules.jpgMacGesture2-Publish.md 使用 ![logo](logo.jpg)就可以插入图片。 添加评论功能1.使用来必力评论系统 在来必力官网注册一个账号，选择免费的city版本安装。 复制其中的uid字段。 打开主题配置文件，定位到livere_uid字段，粘贴上刚刚复制的uid。 修改source/tags/index.md加入comments: false，否则标签和分类里面也会加载评论 2.使用valine（可以匿名评论） 注册LeanCloud账号 创建应用：填写应用名、勾选开发版 进入设置页面查看App ID和App Key 在leancloud存储中创建Class，命名为Counter。修改next/_config.yml中leancloud_visitors，配置阅读统计： 1234567leancloud_visitors: enable: true 设置为true 默认为false app_id: #你的App ID app_key: #你的App Key Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security #设置依赖 security: true #没有hexo-leancloud-counter-security插件，请将security设置为false betterPerformance: true #更好的性能 在leancloud存储中创建Class，命名为Comment。修改next/_config.yml中valine部分，配置评论设置： 1234567891011valine: enable: true # 设置为true，默认为false appid: # 将应用key的App ID设置在这里 appkey: # 将应用key的App Key设置在这里 notify: true# 邮箱通知 , https://github.com/xCss/Valine/wiki，默认为false verify: true# 验证码 默认为false placeholder: Just go go ^_^ # 初始化评论显示 avatar: wavatar # 头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置 guest_info: nick,mail,link # 自定义评论标题 pageSize: 10 # 分页大小，10页就自动分页 visitor: true # 是否允许游客评论 ，进入官网查看设置：https://valine.js.org/visitor.html 设置侧边栏社交编辑主题配置文件，定位到字段social，然后添加社交站点名称与地址即可。1234# Social linkssocial: GitHub: https://github.com/crystalww || github ... 编辑主题配置文件，在social_icons字段下添加社交站点名称（注意大小写）与图标。12345678social_icons: enable: true icons_only: false transition: false GitHub: github Twitter: twitter Weibo: weibo Linkedin: linkedin 图标名称可以参考：http://fontawesome.io/cheatsheet/。 推送到Github上修改站点配置文件：1234deploy: type: git repository: https://github.com/Crystalww/crystalww.github.io.git branch: master 然后执行以下命令：123npm install hexo-deployer-git --save # 安装git部署插件hexo g # 本地生成静态文件hexo d # 将本地静态文件推送至Github 完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 username.github.io。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
